



第三章 进程间通信
	Linux中进程间的通信问题被称为IPC（InterProcess Communication）问题。本质上，进程间通信的原理是利用共享的内核内存空间中开辟一段缓存区。操作系统为操作这段缓冲区提供了一些特殊的使用方法。常见的进程间的通信方式如下:
	管道 
	默认匿名管道，由于父子进程有相同的文件描述符，所以可用。
	信号 （数据量有限，开销小）
	共享映射区（无血缘关系）
	本地套接字（最稳定）
	本章主要练习管道方式进行父子进程间通信，由于寻访管道主要是通过文件操作的方式进行，本节先练习Linux系统编程中对文件的简单操作，为管道通信做准备。
文件描述符与输入输出重定向
	本节涉及到的系统函数包括open read write dup dup2。
文件描述符
PCB进程控制块内的一个成员为指向文件描述符表的指针。文件描述符表的每一项都（linux实际是哈希键值对），指向文件结构体。文件描述符使用起来是整数，实际上就是文件描述符表的索引。如图：
 
	每个程序运行时，默认打开了3个文件描述符：
0--STDIN_FILENO （宏）
1--STDOUT_FILENO
2--STDERR_FILENO
	在程序中新开的文件描述符是从0记最小的数值，比如如果关闭了0号文件描述符，新开的文件描述符又从0开始。下面的代码dup.c打开文件，复制返回的文件描述符给一个新的文件描述符，并且通过新的文件描述符操作文件。
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<string.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    int fd,newfd;
    char * teststr="/*test string */\n";
    fd=open(argv[1],O_RDWR);
    if (fd<0)
    {
        sys_error("open error");
    }
    printf("old fd %d\n",fd);
    newfd=dup(fd);
    printf("new fd %d\n",newfd);
write(newfd,teststr,strlen(teststr));
/*stdout redirect to file test*/
dup2(newfd,STDOUT_FILENO);
printf("test dup2 function \n");
close(fd);
close(newfd);
    return 0;
}
dup.c
	这里涉及到的文件I/O的操作如下：
	int  open(const char * pathname，int flags)
		return 
			成功返回文件描述符，失败返回-1设置errno（error number）
		flags:
必带参数：O_RDONLY O_WRONLY O_RDWR
附加参数：O_TRUNCATE O_CREAT 等
			flags具体说明如下：
			https://www.cnblogs.com/shihuvini/p/10160956.html
头文件
unistd.h （包含sys/types.h）(包含sys/stat.h)
flags参数的宏存在头文件fcntl.h（file control）中
ssize_t read(int fd, void *buf,size_t count);
		return
		ssize_t 代表signed size_t
返回读取的字节数，（0代表读取到文件末尾）
读文件失败返回-1 设置errno
当返回-1，并且 errno为EAGIN 或者 EWOULDBLOCK 说明文件读取为非阻塞状态
	buf 
从文件中读取到的buf位置
count 
从文件中读取的字节数
	ssize_t write(int fd, const void *buf,size_t count);
		基本同read
int dup(int oldfd)
int dup2(int oldfd,int newfd)
   		dup2() 的manpage说明
The dup2() system call performs the same task as dup(), but instead of  using  the  lowest-numbered unused file descriptor, it uses the file descriptor number specified in newfd.  In other words, the file descriptor newfd is adjusted so that it now refers to the same open file description as oldfd.
If the file descriptor newfd was previously open, it is closed before being reused;  the  close is performed silently (i.e., any errors during the close are not reported by dup2()).

	运行结果如下：
	 
	打开文件test的新增的文件描述符为3，dup复制的文件描述符为4，并且也指向test。通过newfd写入的string反映到了文件中。将STDOUT_FILENO通过dup2重新指向test，printf打印的信息输出到了test中。
	
问题1 练习使用dup2进行输出重定向。结合第一章中使用execlp函数的方法，在主进程中创建子进程，子进程运行程序ls -l。把结果重定向输出到文件test中。
父子进程间匿名管道通信
匿名管道一些基本原理
实现原理：
内核使用环形队列机制，借助内核缓冲区，默认为4K大小实现。
特点：
	本质是一个伪文件，因此操作管道可以利用文件I/O进行操作，在linux中类似的文件类型还有字符设备、块设备、网络设备等。它们的一个显著特点为从其中读取数据默认是以阻塞方式读取的，也就是说，如果设备当时没有数据，read函数阻塞，等待有数据时继续读取。可以通过fcntl函数改变文件状态flags设置非阻塞模式读取。
	由2个文件描述符引用，分别表示fd[0]读端和fd[1]写端。
	从写端流入，从读端流出。数据单向流动。
	进程不能自己对一个管道既读又写
	管道内的数据读取后就清空了，不能重复读取
	匿名管道只能在血缘进程间进行通信
管道创建：
int pipe(int fd[2])；
fd[0]读端
fd[1]写端
return 
成功 0
失败 -1 设置errno 
管道的读写行为：
read管道
管道有数据时返回实际读取的字节数
管道无数据时
如果管道的写端全部关闭，则read返回0
如果管道有写端，则read阻塞等待
write管道
如果管道读端全部关闭，此时进程异常终止（SIGPIPE异常信号触发）
如果管道有进程控制读端
如果管道已满，阻塞等待（内核会自动对管道buf进行扩容）
如果管道未满，返回写出的字节个数
父子进程间的文件描述符
fork后，子进程会继承父进程的文件描述符，如下图所示。为了保证数据的单向流动，父子进程需要单独只对管道读或写，把不用的文件描述符需要关闭（close）。
 
查询进程可以获取的默认系统资源
使用命令：
	 ulimit -a 
 
	可以的看到，默认情况下管道的大小为8*512B，为4K。但是如果万一写入管道的内容触及到这个上线。OS会自动对其进行扩容。其它资源数量典型的还包括，打开的文件描述符上线为1024，用户栈的大小为8M。
	以下代码pipe.c是一个父子进程通信的典型demo。父进程写入管道，子进程读取管道中的信息并显示。父进程的wait等待子进程执行完毕并回收子进程，保证终端提示符正确显示。
#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/wait.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    int ret;
    int fd[2];
    char * str="parent process writing message\n";
    char buf[1024];
    ret=pipe(fd);
    if (ret < 0)
    {
        sys_error("pipe create wrong");
    }
    
    pid_t pid=fork();
    if (pid<0)
    {
        sys_error("fork wrong");
    }
    else if (pid==0)
    {
        close(fd[1]); //关闭写端 保证数据单向流动
        ret=read(fd[0],buf,sizeof(buf));
        if (ret < 0)
        {
            sys_error("read wrong");
        }
		printf("read ret %d\n",ret);
        printf("%s",buf);
        close(fd[0]);
    }
    else if (pid>0)
    {
        close(fd[0]); //关闭读端 保证数据单向流动
        write(fd[1],str,strlen(str));
        
        close(fd[1]);
        wait(NULL);
    }
    return 0;
}
pipe.c
问题2
2-1请同学们在父进程中write前加入sleep(10)，观察子进程的read是否是阻塞的，如果把父进程中的write函数注释掉。观察子进程read函数返回的是什么，是否符合管道的读写规则的规范。
	2-2请同学们改写demo，尝试多输入一读取的情形，for循环创建多个子进程，每个子进程写入管道信息"child process %d sending message, pid"。父进程从管道中循环读取信息并显示到终端。
父子进程管道实现ls | wc -l命令
	执行ls | wc -l指令可以统计输出的条目个数。下面让我们编写程序pipe_ls_wc.c实现该命令。这里综合利用了fork,pipe,exec以及输入输出重定向dup2这些系统命令。其中父进程负责执行ls并且将结果写入管道，子进程负责执行wc -l命令并且将结果输出。

#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/wait.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    int ret;
    int fd[2];
    char * str="parent process writing message\n";
    char buf[1024];
    ret=pipe(fd);
    if (ret < 0)
    {
        sys_error("pipe create wrong");
    }
    
    pid_t pid=fork();
    if (pid<0)
    {
        sys_error("fork wrong");
    }
    else if (pid==0)
    {
        close(fd[1]);
        dup2(fd[0],STDIN_FILENO);
        execlp("wc","wc","-l",NULL);
        sys_error("exec error");
        // close(fd[0]); //If exec sucess , PC would not return here.
    }
    else if (pid>0)
    {
        close(fd[0]);
        dup2(fd[1],STDOUT_FILENO);
        execlp("ls","ls",NULL);
		//wait(NULL)
        sys_error("exec error");
        // close(fd[1]);
    }
    return 0;
}
pipe_ls_wc.c
*问题3 请改写上述代码，使用父进程循环for创建2个子进程，子进程1执行ls，通过管道将结果发送给子进程2，子进程2读管道，执行wc -l结果返回终端。父进程负责回收2个子进程
注意，使用管道时要保证数据的单向流动，管道可以多个写端一个读端使用如问题2-2，也可以一个写端多个读端使用。但是不能多个读端多个写端。在问题3描述的情形中，父进程除了创建管道、fork创建子进程、回收子进程外。还要注意在父进程中关闭管道的读端和写端。否则执行失败。

共享内存映射
	管道是传统的进程通信方式，但也有一定的缺陷。由于管道只能通过文件I/O进行操作。一些便利的系统函数strcpy等都无法使用。如果是两个没有血缘关系的进程，需要使用命名管道FIFO。本质上，它是在磁盘上创建的一个伪文件，从中取出的数据还需要送入内存buf中供程序使用。
	 
这里更常用的进程间通信方式是直接使用系统命令mmap创建一个磁盘空间与内存空间相互映射的区域。
 
	共享内存映射函数mmap用法
使用时需要包含头文件sys/mman.h，函数原型如下：
void * mmap(void * addr,size_t length,int prot ,int flags,int fd,off_t offset )
其功能为使用已经存在的文件，创建共享内存映射区。具体参数功能如下：
addr:
指定映射区的首地址，通常为NULL，系统自动分配。
length:
共享内存映射区的大小，不能小于文件大小
prot
共享内存映射区的读写属性
PROT_READ
PROT_WRITE
PROT_READ | PROT_WRITE
flags
标注共享内存的共享属性
MAP_SHARED
MAP_PRIVATE
对文件的修改不会反映到磁盘上一般不这样设置
fd
用于创建共享内存映射区的文件
offset
偏移位置，需要是4K的整数倍
0表示映射文件全部
返回：
成功创建的共享内存映射区的首地址
失败：
返回MAP_FAILED (void *) -1 设置errno
使用mmap时要注意检查返回值，因为它经常出现创建失败的情形，相关的使用注意规则如下：
文件大小与映射区大小
用于创建映射区的文件大小不能为0，mmap参数len不能为0
文件权限与映射区权限：
文件为只读权限不能ftruncate扩展文件大小
文件RDONLY，mmap权限 RROT_READ
能创建mmap，但不能向映射区写东西
文件RDONLY，mmap权限 PROT_WRITE | RROT_READ
mmap错误：无效参数
文件WRONLY，mmap权限 PROT_WRITE
mmap错误：无效参数 因为创建映射区需要读文件
文件描述符在mmap创建后即可关闭
对mmap越界操作可能会触发段错误
当mmap的访问权限为MAP_PRIVATE，open文件时只需要Read权限
一般使用方式：
open(O_RDWR)
mmap(NULL,len,PROT_READ|PROT_WRITE,shared,fd,0)
	下面的demo展示了没有血缘关系的两个进程利用共享内存映射实现通信。其中写端的代码mmap_w.c如下：
	
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/mman.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    char * p=NULL;
    char buf[50]={0};
    int fd = open("testmap",O_RDWR | O_CREAT | O_TRUNC,0644);
    if (fd <0)
    {
        sys_error("open wrong");
    }
    /*lseek extend file size and need I/O operation*/
    /*mmap need file size != 0*/
    // lseek(fd,10,SEEK_END);
    // write(fd,"\0",1);
    /*All operations above can be replaced by function truncate/ftruncate */
    ftruncate(fd,50);
    
    int len=lseek(fd,0,SEEK_END);
    p=mmap(NULL,len,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);
    if (p==MAP_FAILED) //need check return value
    {
        sys_error("mmap error");
    }
    close(fd);
    int i=0;
    while (1)
    {
        sprintf(p,"%d, process 1 writing message\n",i++);
        sleep(1);
    }
    
    int ret = munmap(p,len);
    if (ret==-1)
    {
        sys_error("munmap error");
    }
    
    return 0;
}
mmap_w.c
	mmap_w.c编译运行后，用文件testmap创建了共享映射区。并且循环不停向其中写入字符串。打开testmap可以看到写入共享映射区的内容反映到了文件中。这里要注意，创建共享映射区以后，文件描述符就可以关闭了。创建文件以后，文件大小为0，这里使用了ftruncate函数为文件添加了空白填充扩展了文件的大小，以便可以创建大小非零的映射区。
			 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/mman.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    char * p=NULL;
    int fd = open("testmap",O_RDONLY);
    if (fd <0)
    {
        sys_error("open wrong");
    }
    /*lseek extend file size and need I/O operation*/
    /*mmap need file size != 0*/
    // lseek(fd,10,SEEK_END);
    // write(fd,"\0",1);
    /*All operations above can be replaced by function truncate/ftruncate */

    p=mmap(NULL,50,PROT_READ,MAP_SHARED,fd,0);
    if (p==MAP_FAILED) //need check return value
    {
        sys_error("mmap error");
    }
    close(fd);

    while (1)
    {
        printf("get from mmap:%s",p);
        sleep(1);
    }
    
    int ret = munmap(p,50);
    if (ret==-1)
    {
        sys_error("munmap error");
    }
    
    return 0;
}
mmap_r.c
	mmap_r用只读的方式打开相同的文件，用它去创建内存映射区。此时该映射区和写入程序所指向的是同一内存区域。之后mmap_r从映射区不断读取文本，并且显示在终端上，实现没有血缘关系的两个进程间的通信。执行结果如下：
 
问题4：请在多个终端启动多个mmap_w进程，然后启动一个mmap_r进程读取共享内存映射区。观察是写入的message序号，观察是否有多组写入流数据被读出。
扩展实验——匿名共享内存映射模拟父子进程间生产者消费者问题
	上面的共享内存实验可以看到，在磁盘上打开的文件只有在创建映射区时使用了一下。如果只是以进程间通信为主要目的，创建在多个进程间都可以指向到的同一区域的内存空间更为重要。同匿名管道一样，在具有亲缘关系的进程间可以省略创建磁盘文件的步骤，直接创建匿名共享内存映射区。具体demo如下：

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/mman.h>
#include<sys/wait.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}

int main(int argc,char * argv[])
{
    char * p=NULL;
    // int fd = open("testmap",O_RDWR | O_CREAT | O_TRUNC,0644);
    // if (fd <0)
    // {
    //     sys_error("open wrong");
    // }
    /*lseek extend file size and need I/O operation*/
    /*mmap need file size != 0*/
    // lseek(fd,10,SEEK_END);
    // write(fd,"\0",1);
    /*All operations above can be replaced by function truncate/ftruncate */
    // ftruncate(fd,50);
    
    // int len=lseek(fd,0,SEEK_END);
    p=mmap(NULL,50,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANON,-1,0);
    if (p==MAP_FAILED) //need check return value
    {
        sys_error("mmap error");
    }

    pid_t pid;
    pid=fork();
    if (pid<0)
    {
        perror("fork error");
    }
    if (pid==0)
    {
        sleep(1);
        printf("child read mmap:%s\n",p);
    }
    else if(pid > 0)
    {
        strcpy(p,"mmap hello\n");
        wait(NULL);
        int ret = munmap(p,50);
        if (ret==-1)
        {
            sys_error("munmap error");
        }
    }

    return 0;
}
anonymous_mmap.c
	anonymous_mmap.c中，以前创建文件填充文件大小的操作全部取消了。直接通过在mmap访问权限时加入MAP_ANON选项启用匿名映射区，父子进程通过匿名映射区完成通信。
问题6参照匿名映射区的写法，参考第二章中的生产者和消费者问题模型，完成多生产者进程和多消费者进程问题的模拟。
第四章 内存管理
模拟实现动态分区存储管理
	可变分区管理方式将内存除操作系统占用区域外的空间看做一个大的空闲区。当作业要求装入内存时，根据作业需要内存空间的大小查询内存中的各个空闲区，当从内存空间中找到一个大于或等于该作业大小的内存空闲区时，选择其中一个空闲区，按作业需求量划出一个分区装入该作业，作业执行完后，其所占的内存分区被收回，成为一个空闲区。如果该空闲区的相邻分区也是空闲区，则需要将相邻空闲区合并成一个空闲区。
	问题1：
本实验主存分配算法采用最优适应算法，即按作业要求挑选一个能满足作业要求的最小空闲区分配。最优适应算法是每次为作业分配内存时，总是把既能满足要求、又是最小的空闲分区分配给作业。但最优适应算法容易出现找到的一个分区可能只比作业所需求的长度略大一点的情行，这时，空闲区分割后剩下的空闲区就很小以致很难再使用，降低了内存的使用率。为解决此问题，设定一个限值minsize，如果空闲区的大小减去作业需求长度得到的值小于等于minsize，不再将空闲区分成己分分区和空闲区两部分，而是将整个空闲区都分配给作业。
具体实现时，把空闲区按长度以某种方式(如递增方式)登记在“空闲区表”中，分配时顺序查找“空闲区表”，查找到的第一个空闲区就是满足作业要求的最小分区。在实现回收时，先在“已分配区表”中找到将作业归还的区域，且变为空，检查“空闲区表”中未分配区域，查找是否有相邻空闲区，最后合并空闲区，修改“空闲区表”。设计程序时可选择进行主存分配或主存回收，所需参数为：若是主存分配，输入作业名和所需主存空间大小：若是回收，输入回收作业的作业名，以循环进行主存分配和回收。

页面置换算法模拟
问题2：设计模拟页面置换算法
具体要求如下：
	使用数组存储一组页面请求，页面请求的数量要50个以上，访问的页面号可以用随机数生成（0~20）；
	设置为分配给进程的页框数（假定是5）；
	使用LRU算法，模拟完成全部的页面请求，最后输出总共发生了多少次缺页；
	重新设置页框为10，重复第2和第3步，观察页框数量对缺页中断率的影响；
	在相同页框的情况下，使用FIFO算法模拟全部的页面请求，以此来比对FIFO和LRU之间的差别。
	设计一组寻访序列，观察FIFO算法当中的Belady现像
	



 
扩展实验——使用时钟算法模拟页面置换
