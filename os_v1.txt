


操作系统Linux系统编程实验教程















 
第一章 进程控制
如果使用实验课提供的虚拟桌面，实验中所有的代码请放~/os_lab/目录下，需要保存的代码放在页面上提示的/mnt/cgshare上。
观察进程练习
本节可能会使用的系统命令
ps、gcc、grep、pstree、top、more
1）编译以下程序HelloWorld.c，生成HelloWorld.out
#include<stdio.h> 
int main(void) 
{ 
	printf("Hello World\n"); 
	getchar(); 
	return 0; 
}

HelloWorld.c
	编译命令：
gcc HelloWorld.c -o HelloWorld.out
2) 在多个窗口运行HelloWold.out，观察下图中的现象
 
创建多个窗口运行同一个可执行文件HelloWorld.out。在另一个新的终端使用了ps命令，配合选项用来观察正在运行中的进程。其中aux是常见的选项组合。意义如下：
-a 显示所有进程信息
-u 使用用户为主的格式来显示程序状态
-x 不区分终端主机
	其它常见的参数还有-e、-f、-j（用任务格式显示进程）
	ps指令查询的各项结果的含义有的很直观，结果中的VSZ(virtual mem size)和RSS（resident set size）字段的含义如下：
	https://blog.csdn.net/humanhaunt/article/details/119794634
ps的结果管道传递给grep命令过滤关键字HelloWorld，可以在终端查看到结果。其中，两个进程PID为1426和1588，处于S+的阻塞状态，运行在伪终端pts/2和pts/4上。shell进程开子进程执行相应程序。此时shell进程也是处于阻塞状态，直到子程序结束或转入后台。
3）观察进程关系

创建关系：
父进程创建子进程，同一个父进程创建的子进程之间为兄弟关系。进程的父进程ID为PPID。
问题1：通过ps其它参数(efj)查看多个终端的HelloWorld.out是哪个进程（该进程PID、命令名字）的子进程。使用pstree命令查看此时进程创建关系所构成的进程树。

会话、进程组关系：
	会话：
	用户登录到退出系统的全部活动叫做一次会话（session）对应ID为SID，一个session包含多个进程组。一般开启终端的第一个进程为shell，是此次会话的领头进程（session leader）。用户登录产生的会话会有一个对应的终端，在/dev/tty可以获得其文件描述符。利用守护进程开启的会话没有对应的终端。
	处于作业控制的目的，会把一些进程归成一个进程组,对应的ID（PGID）。如果某些shell没有进程控制能力（ash），那么一个会话中的所有进程都会被归为一个进程组。一条命令可能产生多个进程，第一个进程作为进程组的领头进程，其ID作为PGID
	在终端中运行以下指令：
	top | more &
top系统命令
用来实时查看系统中各个进程占用资源的情况，默认按照CPU占控来排序，一些具体的一些用法：
https://blog.csdn.net/weixin_45465395/article/details/115728520
more命令，用来按页显示输出。&符号表示进程后台运行。	
再运行以下指令：
ps j | more
 
问题2 ： 请回答此时当前终端中这些进程从属几个会话，几个进程组。
参考-Linux中进程状态说明
https://blog.csdn.net/sdkdlwk/article/details/65938204

https://cloud.tencent.com/developer/article/2399212

https://blog.csdn.net/lyndon_li/article/details/114295654

创建进程
本节有可能使用的系统函数：
fork、sleep、exec、getipid、getppid、sleep

	进程在操作系统中创建，都会生成一个进程描述块（PCB），描述当前进程的所有信息，包括数据段、代码段、堆栈段的地址，当前进程的环境变量，文件描述符等。子进程由父进程创建。
fork
pid_t fork(void);

功能：
操作系统先创建一个进程描述块（PCB），然后把父进程的所有进程描述符的信息精确拷贝过来，和父进程一样（除了进程ID不一样外），代码段共享，数据段和堆栈段复制，所有的寄存器的值全部精确拷贝，文件描述符也精确拷贝。但是，一旦子进程开始运行，虽然它继承父进程的所有数据，但实际上两个进程的地址空间己经分幵，不再共享任何数据？，因此相互之间不再有影响。所以用fork()创建进程时，子进程只是完全复制父进程的资源，子进程的执行独立于父进程，因而具有良好的并发性。通常一个程序分多个进程处理时使用。
特性：
	fork()执行以后原来的进程为父进程，创建出来的进程为子进程。父子进程都返回fork下一条指令去执行
	父进程中fork返回子进程pid，子进程中fork返回0
	父子进程之间:
	相同的地方：全局变量、代码段、数据段、堆栈、环境变量、进程目录、用户ID、宿主目录、信号处理方式。此时父子进程间遵循读时共享写时复制原则
	不同的地方：进程ID、fork返回值、父进程ID、进程运行时间、定时器、未决信号集
	真正共享：文件描述符、mmap映射区

编译运行以下样例程序，fork_1.c，体会fork创建进程的用法。
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
int main(int argc, char *argv[])
{
printf("before fork---1\n");
printf("before fork---2\n");
    pid_t pid = fork();
    if (pid == -1)
    {
        perror("fork error");
        exit(1);
    }
    else if (pid == 0)
    {
        printf("child process is created,pid: %d"
        ",parent process pid: %d\n",getpid(),getppid());
    }
    else if (pid > 0)
    {
        printf("parent process pid: %d my parent process is %d \n",getpid(),getppid());
    }
    printf("end of programe\n");
    return 0;
}
fork_1.c
问题3 下面的代码fork_some_child.c想要创建n个子进程，请编译运行该程序并且回答以下几个子问题
3-1 在未修改该程序的情况下，结合运行结果，解释在该程序创建了多少个子进程，他们的父子进程关系是怎样的。（可以加sleep系统函数或getchar()加pstree+父进程PID查看）
3-2 修改fork_some_child.c，让它一个父进程创建n个子进程。并且每个子进程打印自己是第几个被创建的。
3-3 适当增加n的值，多次执行并且观察打印结果。如下图，子进程与父进程之间是否有固定的执行顺序？如果系统子进程按照固定顺序输出，可以怎样添加系统指令（sleep）
 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
int main(int argc, char *argv[])
{
    printf("before fork---\n");
    for (size_t i = 0; i < 3; i++)
    {
        pid_t pid = fork();
        if (pid == -1)
        {
            perror("fork error");
            exit(1);
        }
        else if (pid == 0)
        {
            printf("child process is created,pid: %d"
                   ",parent process pid: %d\n",
                   getpid(), getppid());
        }
        else if (pid > 0)
        {
            printf("parent process pid: %d my parent process is %d \n", getpid(), getppid());
        }
    }

    printf("end of programe\n");
    return 0;
}

fork_some_child.c
问题4 关于父子进程是否共享数据的问题。在代码中加入全局字符串char str[10]="Test str"，分别在父进程和子进程中先打印该字符串的地址（格式符在64位机器上用%lx），观察它们的地址是否一致，然后在父进程中修改它，在子进程中显示该字符串，观察子进程打印的全局变量str是否跟随父进程变化。

gdb调试父子进程
运行以下指令重新生成fork_some_child.out
gcc -g fork_some_child.c -o fork_some_child.out
	使用gdb调试fork_some_child.out：
	gdb fork_some_child.out
	要想在选择调试父进程还是子进程，可以在fork执行前设置断点，运行到断点处时通过以下设置指令控制调式父进程还是子进程。
						  set follow-fork-mode child
set follow-fork-mode parent
示例如下，图中设置了调式子进程方向，父进程直接输出到了终端上，按n执行下一条语句可以看到进入了子进程分支。
 
问题5 请按照上述步骤调试自己程序的子进程并展示结果
exec族函数
	fork创建子进程后，如果希望新的进程执行其它的程序，往往使用exec系列的系统函数。其特点为：
	进程user空间的代码和数据完全被新程序替换。从新的代码段的第一条指令开始执行，pid不变。并且如果执行成功，不返回调用地址。
	常见原型如下：
 
	这里只有execve是真正的系统调用，其它的都是在它之上经过包装的库函数。
execlp函数
int execlp(const char * file,const char * arg, ...)
	这里p代表此系统函数可以借助系统变量PATH运行程序。其中：
file 可执行文件名
arg 可执行文件的参数，注意，从arg[0]开始计算
	参考代码demo如execlp_test.c
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
int main(int argc, char *argv[])
{
    printf("before fork---\n");
    pid_t pid = fork();
    if (pid == -1)
    {
        perror("fork error");
        exit(1);
    }
    else if (pid == 0)
    {
        // execlp("ls","-l","-h",NULL); wrong code
        execlp("ls","ls","-l","-h",NULL);
        perror("exec error");
        exit(1);
    }
    else if (pid > 0)
    {
        printf("parent process pid: %d my parent process is %d \n",getpid(),getppid());
        sleep(1);
    }
    return 0;
}

execlp_test.c
问题6 请同学们自行查找execl系统函数的用法，使用它来执行自己编写的如HelloWorld.out等其它程序。如果要让execl也执行系统命令如ls 、date 、echo等，又该怎么做呢？
参考——Linux源码中的PCB结构
进程控制块用来维护进程相关的信息，Linux的进程控制块task_struct
在/usr/src/linux-headers-[kernel版本]/include/linux/sched.h可以查看PCB结构体
 
主要包括以下信息：
struct task_struct{
pid_t pid #进程id
volatile long status #进程状态（运行就绪、停止、阻塞）
进程切换时上下文寄存器值存储
mm_struct 虚拟地址空间描述、
控制终端信息
当前工作目录
files_struct文件描述符表
信号相关
用户id组id
会话和进程组
资源上线
}

进程回收
僵尸进程与孤儿进程
孤儿进程
	父进程先于子进程退出，此时子进程为孤儿进程。所有的孤儿进程将被init（1号进程）收养。
僵尸进程
	子进程退出时，父进程还没有调用wait进行回收。此时子进程处于僵尸态，这是每个进程退出时都会经历的状态。子进程退出时大部分资源（文件描述符等）都会回收，但是需要留存PCB（task_struct及内核堆栈）记录退出时的状态，异常退出时保存终止该进程的信号是哪个。它们供父进程调用wait系列的系统函数检查，之后子进程才会被彻底清除。如果系统中大量存在僵尸进程，会消耗系统资源。
	
	编译运行orphan.c，在另一个终端运行以下指令：
ps ajx
	观察orphan.out进程的ppid是否随着父进程的终止而改变。
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
int main(int argc, char *argv[])
{
    printf("before fork---\n");
    pid_t pid = fork();
    if (pid == -1)
    {
        perror("fork error");
        exit(1);
    }
    else if (pid == 0)
    {
        printf("child process is created,pid: %d"
        ",parent process pid: %d\n",getpid(),getppid());
        while (1)
        {
            printf("child process is running . ppid: %d\n",getppid());
            sleep(1);
        }
        
    }
    else if (pid > 0)
    {
        printf("parent process pid: %d my parent process is %d \n",getpid(),getppid());
        sleep(10);
    }
    printf("end of programe\n");
    return 0;
}

orphan.c
问题7运行orphan.out的demo时，终端内会不停显示子进程打印的信息。此时使用ctrl+z信号传递给shell程序但是无法终止该子进程（想一想为什么？）。在另一个终端使用系统命令
kill  -9  <pid>
终止该子进程。

	改写orphan.c为zombie.c如下：
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
int main(int argc, char *argv[])
{
    printf("before fork---\n");
    pid_t pid = fork();
    if (pid == -1)
    {
        perror("fork error");
        exit(1);
    }
    else if (pid == 0)
    {
        printf("child process is created,pid: %d"
        ",parent process pid: %d\n",getpid(),getppid());
       sleep(10);
        
    }
    else if (pid > 0)
    {
        printf("parent process pid: %d my parent process is %d \n",getpid(),getppid());
         while (1)
        {
            printf("parent process is running . ppid: %d\n",getpid());
            sleep(1);
        }
    }
    printf("end of programe\n");
    return 0;
}
zombie.c
	此时，zombie.out的3722号子进程已经退出，但他的父进程既没有退出使得子进程被init进程接管，同时也没有调用wait进程回收。可以看到子进程3722处于z+状态。并且此时，使用系统命令kill是无法结束僵尸进程的，因为它在系统中已经处于死亡状态了。可以通过kill它的父进程使得子进程被init接管，进而被回收。
 
wait
pid_t wait(int * status)

功能：
	如果父进程先执行到wait，子进程没有执行完。父进程进入阻塞等待
	回收子进程残留资源
	获取子进程结束的状态
	如果子进程状态发生变化，也可以用其获取
	如果是多个子进程，一次wait只回收某一个子进程

通过包含在sys/wait.h中定义的相关的宏来获取子进程退出的状态。
正常退出：
	WIFEXITED(status)为True
异常退出：
	通过传递信号（ctrl+c）终止进程
	WIFSIGNALED(status)为True

以下代码wait_test.c中父进程通过wait来确认回收进程退出的状态
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
#include<sys/wait.h>
int main(int argc, char *argv[])
{
    printf("before fork---\n");
    int status;
    pid_t wpid;
    pid_t pid = fork();
    if (pid == -1)
    {
        perror("fork error");
        exit(1);
    }
    else if (pid == 0)
    {
        printf("child process is created,pid: %d"
        ",parent process pid: %d\n",getpid(),getppid());
       sleep(10);
       return 3;
    }
    else if (pid > 0)
    {
        printf("parent process pid: %d my parent process is %d \n",getpid(),getppid());
        wpid=wait(&status);
        if (wpid==-1)
        {
            perror("wait error");
            exit(1);
        }
        if (WIFEXITED(status)) //if exit normal
        {
            printf("child exit with %d\n",WEXITSTATUS(status));
            
        }
        
    }
    printf("end of programe\n");
    return 0;
}
wait_test.c
	运行结果如下：
 
问题8 使用man 查询wait其它宏的用法，添加代码通过WIFSIGNALED以及WTERMSIG宏来捕捉进程被其它信号终止的情况。程序运行后，在另一个终端运行kill系统命令杀死子进程。观察此时父进程收集的子进程退出时的状态。
 

waitpid
pid_t waitpid(pid_t pid,int * status,in options)
功能：
	回收特定的一个子进程
特点：
	返回值：
		如果正常回收，会返回子进程PID
		如果options设置了WNOHANG，子进程如果没有结束，父进程不等待直接返回0
		-1 错误
	参数：
		pid
			>0 回收指定的子进程ID
			-1 回收任意子进程
			0 回收同一个进程组内子进程
		option
			设置宏WNOHANG 子进程如果没结束 父进程不阻塞等待直接返回
			NULL

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <sys/wait.h>
int main(int argc, char *argv[])
{
    pid_t pid,tmpid,wpid;
    int i;
    printf("before fork---\n");
    for (i = 0; i < 10; i++)
    {
        pid = fork();
        if (pid == -1)
        {
            perror("fork error");
            exit(1);
        }
      
        
        if (pid == 0)
        {
            break;
        }
          if (i== 2)
        {
            tmpid=pid;
            printf("child process %d to be waited\n",tmpid);
        }
    }
    if (pid == 0)
    {
        printf("child process is created,pid: %d"
               ",parent process pid: %d"
               ",I'm num %d\n",
               getpid(), getppid(),i);
    }
    else if (pid > 0)
    {
        printf("parent process pid: %d my parent process is %d \n", getpid(), getppid());
        wpid=waitpid(tmpid,NULL,0) ;//wait a child process. blocked
        if (wpid == -1)
        {
            perror("waitpid error");
            exit(1);
        }
        printf("parent process wait child %d\n",wpid);
        
    }

    // printf("end of programe\n");
    return 0;
}
waitpid_test.c

问题9练习在父进程里通过循环回收多父进程创建的子进程，每次回收完打印回收的子进程PID
扩展实验——跟踪运行ELF文件生成的进程内存映像
可执行程序以ELF格式存储在磁盘上。操作系统根据它创建出进程映像——进程的虚拟内存分布，它被加载的流程基本如下：
1.	linux下，通过shell启动程序，先fork一个子进程，创建独立的虚拟地址空间。
2.	调用execve程序根据ELF文件段头将ELF文件加载到进程的虚拟空间的对应位置
3.	将PC指向入口地址，注意此时的入口地址不是.text所在地址，一般会定位到程序头代码的位置。
4.	程序头代码在编译时由编译器加入的。属于CRT(C run time )C 运行库代码，
例如arm交叉编译时的crt.o，它初始化C语言运行的基本堆栈环境，保存上下文。之后跳_lib_start_main（C标准库定义glibc）
设置程序运行进程环境，加载共享库，解析输入参数给main，最后调用main函数，已经main函数return后调用exit()结束进程。

下面为样例代码mem_sample.c
#include<stdlib.h>
#include <stdio.h>
#include <unistd.h>
int global_val = 10;
int uinit_global_val;
int add(int a,int b)
{
	return a+b;
}
int main(void)
{
    int a;
    static int static_val = 20;
    static int uinit_local_val;
    a = add(2,3);
    int * p = (int *)malloc(100);
    printf("a= %d\n",a);
    /*
    * 添加代码 打印global_val、a、staticl_val、p的地址
    */
   free(p);
   sleep(1000);
    return 0;
}

mem_sample.c
	它作为进程运行时，其进程的内存映射布局以32位系统为例基本如下图所示：
 

问题10 在代码中添加语句打印全局变量global_val,a,p,static_val的地址值，注意，64位系统要用格式符号%lx。编译运行后，在另一个终端查找mem_sample的PID，运行以下指令查看其进程内存布局：
cat /proc/<PID>/maps
观察这些上述这些变量打印的地址是否在进程内存映像中的相应位置。
 
 
第二章 线程与线程同步
一些基本概念
Linux中的线程
Linux中的线程出现的较晚，相关功能是通过进程实现的。
线程创建时，底层使用的系统函数和进程一样都是clone，创建一个新的PCB，内核看它就是一个新的进程，只不过它和原来的PCB指向同一片地址空间，也就是说它们指向的多级页表是一样的。此时也可以说原来的进程蜕变为线程。
线程有独立的PCB，共享地址空间，是最小的执行单位
进程是最小的分配资源单位，可以看成是只有一个线程的进程。
 
线程之间的共享与非共享情况
线程可以看做寄存器和栈的集合。
共享：
内存地址空间（.text/.data/.bss/heap/共享库）
		线程共享数据很方便，可以通过全局变量，heap等实现。
信号处理方式
信号对进程发，所有线程谁捕获到谁收，mask掩码不共享，可以通过它设置哪个线程处理，但信号和线程配合的不好。
文件描述符表
用户ID组ID
当前工作目录
独立：
	线程id
	寄存器现场和栈指针（内核栈，用来保存寄存器临时值）
	用户空间栈
	调度优先级
	errno虽然是全局变量，但是此时也不共享
	mask掩码
Linux中查看线程
	使用下面的指令格式可以查看某个进程的线程情况。
ps -Lf <PID>
 
这里查看了332号的terminal进程。可以看到LWP（Light weight process）轻量级进程，被称为线程号，从PID 332后继续增加。进程里面开多个线程虽然会提升CPU占用率，但有一定限制，超过某个值。切换的开销过大，CPU利用率降低。

参考——Linux中的线程
https://blog.csdn.net/m0_46606290/article/details/124651250

线程相关的函数库
使用时要注意以下操作
#include<pthread.h>
gcc编译时加 -lpthread选项
创建线程
pthread_self 
获取线程ID，在进内部程中标识线程身份
pthread_create
int pthread_create(pthread_t * thread,const pthread_attr_t * arr,
void *(*start_routine)(void *)，void *arg );
thread 返回的线程ID
arr 线程属性，包括线程分离、优先级、栈空间大小。通常NULL，默认属性
start_routine 回调函数，当pthread_create函数返回,线程创建时自动调用执行
arg 回调函数参数
成功返回0，失败返回errno thread undefine
pthread_exit
void pthread_exit(void * retval)
将当前线程退出 
线程函数return也是退出线程,主线程return，整个进程都退出。

下面是创建子线程得demo，pthread_create.c
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
int global_var=100;
void * tfn(void *arg)
{
    printf("thread:pid = %d,tid =%lu\n",getpid(),pthread_self());
    global_var=200;
    return NULL;
}
int main(int argc, char *argv[])
{
    pthread_t tid;
    tid=pthread_self();
    printf("main:pid = %d,tid =%lu\n",getpid(),tid);
    printf("Before create global_var:%d\n",global_var);
    int ret = pthread_create(&tid,NULL,tfn,NULL);
    if (ret != 0)
    {
        perror("pthread_create error");
    }
    sleep(1); //main pthread wait before return
printf("After create global_var:%d\n",global_var);
//pthread_exit(NULL); 
    return 0;
}
pthread_create.c
	此demo创建了一个子线程，并且在子线程中修改了全局变量，在主线程中先后打印了该全局变量。观察主子线程间的共享数据问题。
问题1：
	1-1 请同学们尝试注销sleep(1)，编译运行该程序后观察子线程还正常执行吗。
	1-2 如果注销sleep(1)后，用退出线程函数pthread_exit替代主线程return，观察后续情况。

问题2：
	编写程序创建多个子线程，每个子线程按顺序输出打印自己是第几个创建的，效果如下图。注意pthread_create的参数。如果要向子进程传递主进程的数据，要传值还是变量i的地址。
 
线程回收
pthread_join
int pthread_join(pthread_t thread,void **retval)
	阻塞等待线程退出，回收线程退出状态。
	thread 传递tid 与create的参数 pthread_t * thread不同，带*是要创建后返回线程tid
	void * retval 回收退出时的状态。
	进程的wait的参数int * status，父进程通过定义int status，传地址回收
	pthread_exit返回退出值为void * retval，主线程回收时得用void ** 类型回收
下面的样例pthread_join.c子线程退出时返回结构体被主线程回收时获取。
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
typedef struct thread_ret
{
    int var;
    char str[100];
} Th_Ret;

void sys_err(int ret,const char * str)
{
    fprintf(stderr,"%s%s\n",str,strerror(ret));
    exit(1);
}
void * tfn(void * arg)
{
    Th_Ret * tval;
    tval=malloc(sizeof(Th_Ret)); 
    tval->var=100;
    strcpy(tval->str,"thread return mesg");
    pthread_exit((void *)tval);
}
int main(int argc, char *argv[])
{
    pthread_t tid;
    Th_Ret * retval;
    int ret=pthread_create(&tid,NULL,tfn,NULL);
    if (ret !=0)
    {
        sys_err(ret,"pthread create error");
    }
    ret = pthread_join(tid,(void **)&retval);
     if (ret !=0)
    {
        sys_err(ret,"pthread join error");
    }
    printf("Thread return var : %d, mesg : %s\n",retval->var,retval->str);
    pthread_exit(NULL);
}
pthread_join.c
问题3请参照问题2的结果，编写使用pthread_join在主线程回收多个子线程的情况。
线程互斥锁
	当多个线程共同访问同一共享资源时可以使用线程的互斥锁确保操作互斥性。

1.	创建互斥锁结构体：
pthread_mutex_t mutex
2.	初始化互斥锁
a)	初始化相当于将mutex置1
b)	静态初始化：
pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER
c)	动态初始化：
		pthread_mutex_init
		原型：
	int pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr)

3.	pthread_mutex_lock
	
4.	pthread_mutex_unlock
问题4 下面的demo pthread_shared.c模拟了2个线程共同占用stdout的情形。主线程输出A-1 A-2为完整的输出，子线程也类似。其中sleep(rand()%3)模拟线程随机占用共享资源的时间。运行下面的代码pthread_shared后得到的结果如图：
 
请在代码处加锁以保证输出不混叠，并补足线程回收，销毁互斥锁的操作。

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
pthread_mutex_t mutex; //define a mutex

void sys_err(int ret,const char *str)
{
    fprintf(stderr,"%s%s\n",str,strerror(ret));
    exit(1);
}
void *tfn(void * arg)
{
    srand(time(NULL));
    while (1)
    {
        printf("B-1 ");
        sleep(rand()%3);
        printf("B-2\n");
        sleep(rand()%3);
    }
    

}
int main(int argc, char *argv[])
{
    pthread_t tid;
    srand(time(NULL));
    int ret=pthread_mutex_init(&mutex,NULL);
    if (ret != 0 )
    {
       fprintf(stderr,"mutex init error %s\n",strerror(ret));
        exit(1);
    }
    
   ret= pthread_create(&tid,NULL,tfn,NULL);
   if (ret != 0 )
   {
       sys_err(ret,"pthread create error");
   }
    while (1)
    {
        printf("A-1 ");
        sleep(rand()%3);
        printf("A-2\n");
        sleep(rand()%3);
    }
    
    return 0;
}
pthread_shared.c
扩展实验——多线程字符统计
当多个线程共享使用同一段内存时，为了保证数据的一致性，就需要考虑到线程同步的问题。linux下提供了多种方式来处理线程同步，最常用的是互斥量、条件变量和信号量。互斥量允许程序锁住某个对象，使得每次只能有一个线程访问它。为了控制对关键代码的访问，必须在进入这段代码之前锁住一个互斥量，然后在完成操作之后解锁。
拥有互斥量的线程才具有访问资源的权限，由于互斥对象只有一个，这就决定了任何情况下共享资源都不会被多个线程同时访问。使用互斥不仅能够在同一应用程序的不同线程中实现资源的安全共享，而且可以在不同应用程序的线程之间实现对资源的安全共享。
多线程统计输入文本的总字符数，主线程代码中首先给工作区加锁，向其中读入文本。然后解锁允许其他线程访问它并统计字符数目。程序将周期性地尝试给互斥量加锁，检查字符数目是否己统计完毕。如果还需要等待，则释放互斥量。
新线程首先试图对互斥量加锁。如果它己经被加锁，这个调用将被阻塞直到锁被释放为止。一旦获得访问权，新线程将检查是否有申请退出程序的请求。如果有，就简单设置time_to_exit变量，再把工作区的第1个字符设置为‘\0’，然后退出。如果不想退出，就对 字符个数进行统计。然后把work_area数组中的第1个字符设置为NULL。通过将第1个字符设置为NULL通知读取输入的线程已完成字符统计。随后解锁互斥量并等待主线程继续运行。程序将周期性地尝试给互斥量加锁，如加锁成功，则检查是否主线程又有字符需要统计。若没有，则解锁互斥景继续等待；否则将统计字符个数，并再次进入循环。
完成的效果如下：
 

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <string.h>

void *thread_function(void *arg);
pthread_mutex_t work_mutex; /*互斥量，保护工作区及额外变量time_to_exit*/
#define WORK_SIZE 1024
char work_area[WORK_SIZE]; /*工作区*/
int time_to_exit = 0;
int main( ) {
    int res;
    pthread_t a_thread;
    void *thread_result;
    res = pthread_mutex_init(&work_mutex,NULL); /*初始化工作区*/
    if (res != 0) {
        perror("Mutex initialization failed");
        exit(EXIT_FAILURE);
    }
    res = pthread_create(&a_thread,NULL,thread_function,NULL); /*创建新线程*/ 
    if (res != 0) {
        perror("Thread creation failed");
        exit(EXIT_FAILURE);
    }
/*主线程*/
	printf("Input some text. Enter 'end' to finish\n");
	/*编写代码完成主线程主要功能*/
	printf("\nWaiting for thread to finish...\n");
    res = pthread_join(a_thread, &thread_result);
    if (res != 0) {
        perror("Thread join failed");
        exit(EXIT_FAILURE);
    }
    printf("Thread joined\n");
    pthread_mutex_destroy(&work_mutex);
    exit(EXIT_SUCCESS);
}
/*新线程*/
void *thread_function(void *arg) 
{
   /*编写代码完整子线程功能*/
    pthread_exit(0);
}
pthread_count_char.c
信号量生产者消费者问题练习
Linux支持SystemV中IPC的信号量集和POSIX信号量，前者基于内核实现，可以创建一组信号量，对信号量的增减可以超过1，功能更为强大复杂，常用于进程间同步。在线程同步时常使用更为简洁的POSIX信号量。这里使用POSIX无名信号完成实验。
信号量使用需要添加semaphare.h
信号量类型
sem_t sem
POSIX无名信号量的几种操作
1.	创建/销毁信号量
int sem_init(sem_t *sem,int pshared,unsigned int value);
	value:
		指定信号量的初始值
int sem_destroy(sem_t * sem);
2.	P操作
int sem_wait(sem_t * sem)
3.	V操作
int sem_post(sem_t * sem)
	
生产者和消费者问题：
	也称有限缓冲问题，是一个经典的进程/线程同步问题。其本质是如何控制并发进程对有界共享主存区的访问。生产者进程生产产品，然后将产品放置在一个空缓冲区中供消费者进程消费。消费者进程从缓冲区中获得产品，然后释放缓冲区。当生产者进程生产产品时，如果没有空缓冲区可用，那么生产者进程必须等待消费者进程释放出一个空缓冲区。当消费者进程消费产品时，如果没有满的缓冲区，那么消费者进程将被阻塞，直到新的产品被生产出来。
 
 

	下面的代码pthread_producer_consumer.c给出了一个生产者，一个消费者线程的模型。
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>
#include<semaphore.h>
#define NUM 5
int buffer[NUM]={0};
sem_t empty,product;

void * producer(void *arg)
{
    int i=0;
    while (1)
    {
        sem_wait(&empty);
        buffer[i]=rand()%1000+1;
        printf("Producer %lu produce data:%d in position %d\n",
            pthread_self(),buffer[i],i);
        i=(i+1)%NUM;
        sem_post(&product);
        sleep(rand()%3);
    }
    
    pthread_exit(NULL);
}
void * consumer(void *arg)
{
    int i=0;
    while (1)
    {
        sem_wait(&product);
        printf("Consumer %lu consuming data:%d in position %d\n",
            pthread_self(),buffer[i],i);
        buffer[i]=0;
        i++;
        i%=NUM;
        sem_post(&empty);
        sleep(rand()%3);
    }
    pthread_exit(NULL);
}

void sys_err(int ret,const char * str)
{
    fprintf(stderr,"%s%s\n",str,strerror(ret));
    exit(1);
}
int main(int argc, char *argv[])
{
    pthread_t ptid,ctid;
    srand(time(NULL));
    /*init sem*/
    sem_init(&empty,0,NUM);
    sem_init(&product,0,0);

    /*create produce consumer pthread*/
    int ret = pthread_create(&ptid,NULL,producer,NULL);
    if(ret != 0)
    {
        sys_err(ret,"pthread create error :");
    }
    pthread_create(&ctid,NULL,consumer,NULL);
    if(ret != 0)
    {
        sys_err(ret,"pthread create error :");
    }

    /*join pthread*/
    pthread_join(ptid,NULL);
    pthread_join(ctid,NULL);

    /*sem destroy*/
    sem_destroy(&empty);
    sem_destroy(&product);

    return 0;
}
pthread_producer_consumer.c
	运行结果如下：
 
*问题5 改写上面的代码，模拟多个生产者和多个消费者线程的情形。注意此时多线程访问临界区域时要进行互斥保护，复习PV原语的使用注意互斥锁添加的位置。可以使用互斥锁或value为1的信号量进行互斥。

第三章 进程间通信
	Linux中进程间的通信问题被称为IPC（InterProcess Communication）问题。本质上，进程间通信的原理是利用共享的内核内存空间中开辟一段缓存区。操作系统为操作这段缓冲区提供了一些特殊的使用方法。常见的进程间的通信方式如下:
	管道 
	默认匿名管道，由于父子进程有相同的文件描述符，所以可用。
	信号 （数据量有限，开销小）
	共享映射区（无血缘关系）
	本地套接字（最稳定）
	本章主要练习管道方式进行父子进程间通信，由于寻访管道主要是通过文件操作的方式进行，本节先练习Linux系统编程中对文件的简单操作，为管道通信做准备。
文件描述符与输入输出重定向
	本节涉及到的系统函数包括open read write dup dup2。
文件描述符
PCB进程控制块内的一个成员为指向文件描述符表的指针。文件描述符表的每一项都（linux实际是哈希键值对），指向文件结构体。文件描述符使用起来是整数，实际上就是文件描述符表的索引。如图：
 
	每个程序运行时，默认打开了3个文件描述符：
0--STDIN_FILENO （宏）
1--STDOUT_FILENO
2--STDERR_FILENO
	在程序中新开的文件描述符是从0记最小的数值，比如如果关闭了0号文件描述符，新开的文件描述符又从0开始。下面的代码dup.c打开文件，复制返回的文件描述符给一个新的文件描述符，并且通过新的文件描述符操作文件。
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<string.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    int fd,newfd;
    char * teststr="/*test string */\n";
    fd=open(argv[1],O_RDWR);
    if (fd<0)
    {
        sys_error("open error");
    }
    printf("old fd %d\n",fd);
    newfd=dup(fd);
    printf("new fd %d\n",newfd);
write(newfd,teststr,strlen(teststr));
/*stdout redirect to file test*/
dup2(newfd,STDOUT_FILENO);
printf("test dup2 function \n");
close(fd);
close(newfd);
    return 0;
}
dup.c
	这里涉及到的文件I/O的操作如下：
	int  open(const char * pathname，int flags)
		return 
			成功返回文件描述符，失败返回-1设置errno（error number）
		flags:
必带参数：O_RDONLY O_WRONLY O_RDWR
附加参数：O_TRUNCATE O_CREAT 等
			flags具体说明如下：
			https://www.cnblogs.com/shihuvini/p/10160956.html
头文件
unistd.h （包含sys/types.h）(包含sys/stat.h)
flags参数的宏存在头文件fcntl.h（file control）中
ssize_t read(int fd, void *buf,size_t count);
		return
		ssize_t 代表signed size_t
返回读取的字节数，（0代表读取到文件末尾）
读文件失败返回-1 设置errno
当返回-1，并且 errno为EAGIN 或者 EWOULDBLOCK 说明文件读取为非阻塞状态
	buf 
从文件中读取到的buf位置
count 
从文件中读取的字节数
	ssize_t write(int fd, const void *buf,size_t count);
		基本同read
int dup(int oldfd)
int dup2(int oldfd,int newfd)
   		dup2() 的manpage说明
The dup2() system call performs the same task as dup(), but instead of  using  the  lowest-numbered unused file descriptor, it uses the file descriptor number specified in newfd.  In other words, the file descriptor newfd is adjusted so that it now refers to the same open file description as oldfd.
If the file descriptor newfd was previously open, it is closed before being reused;  the  close is performed silently (i.e., any errors during the close are not reported by dup2()).

	运行结果如下：
	 
	打开文件test的新增的文件描述符为3，dup复制的文件描述符为4，并且也指向test。通过newfd写入的string反映到了文件中。将STDOUT_FILENO通过dup2重新指向test，printf打印的信息输出到了test中。
	
问题1 练习使用dup2进行输出重定向。结合第一章中使用execlp函数的方法，在主进程中创建子进程，子进程运行程序ls -l。把结果重定向输出到文件test中。
父子进程间匿名管道通信
匿名管道一些基本原理
实现原理：
内核使用环形队列机制，借助内核缓冲区，默认为4K大小实现。
特点：
	本质是一个伪文件，因此操作管道可以利用文件I/O进行操作，在linux中类似的文件类型还有字符设备、块设备、网络设备等。它们的一个显著特点为从其中读取数据默认是以阻塞方式读取的，也就是说，如果设备当时没有数据，read函数阻塞，等待有数据时继续读取。可以通过fcntl函数改变文件状态flags设置非阻塞模式读取。
	由2个文件描述符引用，分别表示fd[0]读端和fd[1]写端。
	从写端流入，从读端流出。数据单向流动。
	进程不能自己对一个管道既读又写
	管道内的数据读取后就清空了，不能重复读取
	匿名管道只能在血缘进程间进行通信
管道创建：
int pipe(int fd[2])；
fd[0]读端
fd[1]写端
return 
成功 0
失败 -1 设置errno 
管道的读写行为：
read管道
管道有数据时返回实际读取的字节数
管道无数据时
如果管道的写端全部关闭，则read返回0
如果管道有写端，则read阻塞等待
write管道
如果管道读端全部关闭，此时进程异常终止（SIGPIPE异常信号触发）
如果管道有进程控制读端
如果管道已满，阻塞等待（内核会自动对管道buf进行扩容）
如果管道未满，返回写出的字节个数
父子进程间的文件描述符
fork后，子进程会继承父进程的文件描述符，如下图所示。为了保证数据的单向流动，父子进程需要单独只对管道读或写，把不用的文件描述符需要关闭（close）。
 
查询进程可以获取的默认系统资源
使用命令：
	 ulimit -a 
 
	可以的看到，默认情况下管道的大小为8*512B，为4K。但是如果万一写入管道的内容触及到这个上线。OS会自动对其进行扩容。其它资源数量典型的还包括，打开的文件描述符上线为1024，用户栈的大小为8M。
	以下代码pipe.c是一个父子进程通信的典型demo。父进程写入管道，子进程读取管道中的信息并显示。父进程的wait等待子进程执行完毕并回收子进程，保证终端提示符正确显示。
#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/wait.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    int ret;
    int fd[2];
    char * str="parent process writing message\n";
    char buf[1024];
    ret=pipe(fd);
    if (ret < 0)
    {
        sys_error("pipe create wrong");
    }
    
    pid_t pid=fork();
    if (pid<0)
    {
        sys_error("fork wrong");
    }
    else if (pid==0)
    {
        close(fd[1]); //关闭写端 保证数据单向流动
        ret=read(fd[0],buf,sizeof(buf));
        if (ret < 0)
        {
            sys_error("read wrong");
        }
		printf("read ret %d\n",ret);
        printf("%s",buf);
        close(fd[0]);
    }
    else if (pid>0)
    {
        close(fd[0]); //关闭读端 保证数据单向流动
        write(fd[1],str,strlen(str));
        
        close(fd[1]);
        wait(NULL);
    }
    return 0;
}
pipe.c
问题2
2-1请同学们在父进程中write前加入sleep(10)，观察子进程的read是否是阻塞的，如果把父进程中的write函数注释掉。观察子进程read函数返回的是什么，是否符合管道的读写规则的规范。
	2-2请同学们改写demo，尝试多输入一读取的情形，for循环创建多个子进程，每个子进程写入管道信息"child process %d sending message, pid"。父进程从管道中循环读取信息并显示到终端。
父子进程管道实现ls | wc -l命令
	执行ls | wc -l指令可以统计输出的条目个数。下面让我们编写程序pipe_ls_wc.c实现该命令。这里综合利用了fork,pipe,exec以及输入输出重定向dup2这些系统命令。其中父进程负责执行ls并且将结果写入管道，子进程负责执行wc -l命令并且将结果输出。

#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/wait.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    int ret;
    int fd[2];
    char * str="parent process writing message\n";
    char buf[1024];
    ret=pipe(fd);
    if (ret < 0)
    {
        sys_error("pipe create wrong");
    }
    
    pid_t pid=fork();
    if (pid<0)
    {
        sys_error("fork wrong");
    }
    else if (pid==0)
    {
        close(fd[1]);
        dup2(fd[0],STDIN_FILENO);
        execlp("wc","wc","-l",NULL);
        sys_error("exec error");
        // close(fd[0]); //If exec sucess , PC would not return here.
    }
    else if (pid>0)
    {
        close(fd[0]);
        dup2(fd[1],STDOUT_FILENO);
        execlp("ls","ls",NULL);
		//wait(NULL)
        sys_error("exec error");
        // close(fd[1]);
    }
    return 0;
}
pipe_ls_wc.c
*问题3 请改写上述代码，使用父进程循环for创建2个子进程，子进程1执行ls，通过管道将结果发送给子进程2，子进程2读管道，执行wc -l结果返回终端。父进程负责回收2个子进程
注意，使用管道时要保证数据的单向流动，管道可以多个写端一个读端使用如问题2-2，也可以一个写端多个读端使用。但是不能多个读端多个写端。在问题3描述的情形中，父进程除了创建管道、fork创建子进程、回收子进程外。还要注意在父进程中关闭管道的读端和写端。否则执行失败。

共享内存映射
	管道是传统的进程通信方式，但也有一定的缺陷。由于管道只能通过文件I/O进行操作。一些便利的系统函数strcpy等都无法使用。如果是两个没有血缘关系的进程，需要使用命名管道FIFO。本质上，它是在磁盘上创建的一个伪文件，从中取出的数据还需要送入内存buf中供程序使用。
	 
这里更常用的进程间通信方式是直接使用系统命令mmap创建一个磁盘空间与内存空间相互映射的区域。
 
	共享内存映射函数mmap用法
使用时需要包含头文件sys/mman.h，函数原型如下：
void * mmap(void * addr,size_t length,int prot ,int flags,int fd,off_t offset )
其功能为使用已经存在的文件，创建共享内存映射区。具体参数功能如下：
addr:
指定映射区的首地址，通常为NULL，系统自动分配。
length:
共享内存映射区的大小，不能小于文件大小
prot
共享内存映射区的读写属性
PROT_READ
PROT_WRITE
PROT_READ | PROT_WRITE
flags
标注共享内存的共享属性
MAP_SHARED
MAP_PRIVATE
对文件的修改不会反映到磁盘上一般不这样设置
fd
用于创建共享内存映射区的文件
offset
偏移位置，需要是4K的整数倍
0表示映射文件全部
返回：
成功创建的共享内存映射区的首地址
失败：
返回MAP_FAILED (void *) -1 设置errno
使用mmap时要注意检查返回值，因为它经常出现创建失败的情形，相关的使用注意规则如下：
文件大小与映射区大小
用于创建映射区的文件大小不能为0，mmap参数len不能为0
文件权限与映射区权限：
文件为只读权限不能ftruncate扩展文件大小
文件RDONLY，mmap权限 RROT_READ
能创建mmap，但不能向映射区写东西
文件RDONLY，mmap权限 PROT_WRITE | RROT_READ
mmap错误：无效参数
文件WRONLY，mmap权限 PROT_WRITE
mmap错误：无效参数 因为创建映射区需要读文件
文件描述符在mmap创建后即可关闭
对mmap越界操作可能会触发段错误
当mmap的访问权限为MAP_PRIVATE，open文件时只需要Read权限
一般使用方式：
open(O_RDWR)
mmap(NULL,len,PROT_READ|PROT_WRITE,shared,fd,0)
	下面的demo展示了没有血缘关系的两个进程利用共享内存映射实现通信。其中写端的代码mmap_w.c如下：
	
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/mman.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    char * p=NULL;
    char buf[50]={0};
    int fd = open("testmap",O_RDWR | O_CREAT | O_TRUNC,0644);
    if (fd <0)
    {
        sys_error("open wrong");
    }
    /*lseek extend file size and need I/O operation*/
    /*mmap need file size != 0*/
    // lseek(fd,10,SEEK_END);
    // write(fd,"\0",1);
    /*All operations above can be replaced by function truncate/ftruncate */
    ftruncate(fd,50);
    
    int len=lseek(fd,0,SEEK_END);
    p=mmap(NULL,len,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);
    if (p==MAP_FAILED) //need check return value
    {
        sys_error("mmap error");
    }
    close(fd);
    int i=0;
    while (1)
    {
        sprintf(p,"%d, process 1 writing message\n",i++);
        sleep(1);
    }
    
    int ret = munmap(p,len);
    if (ret==-1)
    {
        sys_error("munmap error");
    }
    
    return 0;
}
mmap_w.c
	mmap_w.c编译运行后，用文件testmap创建了共享映射区。并且循环不停向其中写入字符串。打开testmap可以看到写入共享映射区的内容反映到了文件中。这里要注意，创建共享映射区以后，文件描述符就可以关闭了。创建文件以后，文件大小为0，这里使用了ftruncate函数为文件添加了空白填充扩展了文件的大小，以便可以创建大小非零的映射区。
			 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/mman.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}
int main(int argc,char * argv[])
{
    char * p=NULL;
    int fd = open("testmap",O_RDONLY);
    if (fd <0)
    {
        sys_error("open wrong");
    }
    /*lseek extend file size and need I/O operation*/
    /*mmap need file size != 0*/
    // lseek(fd,10,SEEK_END);
    // write(fd,"\0",1);
    /*All operations above can be replaced by function truncate/ftruncate */

    p=mmap(NULL,50,PROT_READ,MAP_SHARED,fd,0);
    if (p==MAP_FAILED) //need check return value
    {
        sys_error("mmap error");
    }
    close(fd);

    while (1)
    {
        printf("get from mmap:%s",p);
        sleep(1);
    }
    
    int ret = munmap(p,50);
    if (ret==-1)
    {
        sys_error("munmap error");
    }
    
    return 0;
}
mmap_r.c
	mmap_r用只读的方式打开相同的文件，用它去创建内存映射区。此时该映射区和写入程序所指向的是同一内存区域。之后mmap_r从映射区不断读取文本，并且显示在终端上，实现没有血缘关系的两个进程间的通信。执行结果如下：
 
问题4：请在多个终端启动多个mmap_w进程，然后启动一个mmap_r进程读取共享内存映射区。观察是写入的message序号，观察是否有多组写入流数据被读出。
扩展实验——匿名共享内存映射模拟父子进程间生产者消费者问题
	上面的共享内存实验可以看到，在磁盘上打开的文件只有在创建映射区时使用了一下。如果只是以进程间通信为主要目的，创建在多个进程间都可以指向到的同一区域的内存空间更为重要。同匿名管道一样，在具有亲缘关系的进程间可以省略创建磁盘文件的步骤，直接创建匿名共享内存映射区。具体demo如下：

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/mman.h>
#include<sys/wait.h>
void sys_error(const char * str)
{
    perror(str);
    exit(1);
}

int main(int argc,char * argv[])
{
    char * p=NULL;
    // int fd = open("testmap",O_RDWR | O_CREAT | O_TRUNC,0644);
    // if (fd <0)
    // {
    //     sys_error("open wrong");
    // }
    /*lseek extend file size and need I/O operation*/
    /*mmap need file size != 0*/
    // lseek(fd,10,SEEK_END);
    // write(fd,"\0",1);
    /*All operations above can be replaced by function truncate/ftruncate */
    // ftruncate(fd,50);
    
    // int len=lseek(fd,0,SEEK_END);
    p=mmap(NULL,50,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANON,-1,0);
    if (p==MAP_FAILED) //need check return value
    {
        sys_error("mmap error");
    }

    pid_t pid;
    pid=fork();
    if (pid<0)
    {
        perror("fork error");
    }
    if (pid==0)
    {
        sleep(1);
        printf("child read mmap:%s\n",p);
    }
    else if(pid > 0)
    {
        strcpy(p,"mmap hello\n");
        wait(NULL);
        int ret = munmap(p,50);
        if (ret==-1)
        {
            sys_error("munmap error");
        }
    }

    return 0;
}
anonymous_mmap.c
	anonymous_mmap.c中，以前创建文件填充文件大小的操作全部取消了。直接通过在mmap访问权限时加入MAP_ANON选项启用匿名映射区，父子进程通过匿名映射区完成通信。
问题6参照匿名映射区的写法，参考第二章中的生产者和消费者问题模型，完成多生产者进程和多消费者进程问题的模拟。
第四章 内存管理
模拟实现动态分区存储管理
	可变分区管理方式将内存除操作系统占用区域外的空间看做一个大的空闲区。当作业要求装入内存时，根据作业需要内存空间的大小查询内存中的各个空闲区，当从内存空间中找到一个大于或等于该作业大小的内存空闲区时，选择其中一个空闲区，按作业需求量划出一个分区装入该作业，作业执行完后，其所占的内存分区被收回，成为一个空闲区。如果该空闲区的相邻分区也是空闲区，则需要将相邻空闲区合并成一个空闲区。
	问题1：
本实验主存分配算法采用最优适应算法，即按作业要求挑选一个能满足作业要求的最小空闲区分配。最优适应算法是每次为作业分配内存时，总是把既能满足要求、又是最小的空闲分区分配给作业。但最优适应算法容易出现找到的一个分区可能只比作业所需求的长度略大一点的情行，这时，空闲区分割后剩下的空闲区就很小以致很难再使用，降低了内存的使用率。为解决此问题，设定一个限值minsize，如果空闲区的大小减去作业需求长度得到的值小于等于minsize，不再将空闲区分成己分分区和空闲区两部分，而是将整个空闲区都分配给作业。
具体实现时，把空闲区按长度以某种方式(如递增方式)登记在“空闲区表”中，分配时顺序查找“空闲区表”，查找到的第一个空闲区就是满足作业要求的最小分区。在实现回收时，先在“已分配区表”中找到将作业归还的区域，且变为空，检查“空闲区表”中未分配区域，查找是否有相邻空闲区，最后合并空闲区，修改“空闲区表”。设计程序时可选择进行主存分配或主存回收，所需参数为：若是主存分配，输入作业名和所需主存空间大小：若是回收，输入回收作业的作业名，以循环进行主存分配和回收。

页面置换算法模拟
问题2：设计模拟页面置换算法
具体要求如下：
	使用数组存储一组页面请求，页面请求的数量要50个以上，访问的页面号可以用随机数生成（0~20）；
	设置为分配给进程的页框数（假定是5）；
	使用LRU算法，模拟完成全部的页面请求，最后输出总共发生了多少次缺页；
	重新设置页框为10，重复第2和第3步，观察页框数量对缺页中断率的影响；
	在相同页框的情况下，使用FIFO算法模拟全部的页面请求，以此来比对FIFO和LRU之间的差别。
	设计一组寻访序列，观察FIFO算法当中的Belady现像
	



 
扩展实验——使用时钟算法模拟页面置换
